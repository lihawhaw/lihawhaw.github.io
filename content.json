{"meta":{"title":"One.Doub","subtitle":"极致源于梦想","description":"前端","author":"Mr.li","url":"https://lihaha.me","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-06-30T05:10:49.479Z","updated":"2021-06-30T05:10:49.479Z","comments":true,"path":"404.html","permalink":"https://lihaha.me/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-12-28T13:31:12.000Z","updated":"2021-06-30T05:10:49.482Z","comments":true,"path":"about/index.html","permalink":"https://lihaha.me/about/index.html","excerpt":"","text":"var myChart2 = echarts.init(document.getElementById(\"test2\"));//div元素节点的对象 option2 = { // title: { // text: '基础雷达图' // }, tooltip: {}, legend: { data: ['个人能力评估'] }, radar: { // shape: 'circle', name: { textStyle: { color: '#fff', backgroundColor: '#999', borderRadius: 3, padding: [3, 5] } }, indicator: [ { name: 'vue', max: 10000}, { name: 'react', max: 10000}, { name: 'Python', max: 10000}, { name: 'TS', max: 10000}, { name: 'axiso(二次封装)', max: 10000}, { name: 'webpack', max: 10000} ] }, series: [{ name: '', type: 'radar', // areaStyle: {normal: {}}, data: [ { value: [7000, 8500, 2000, 3000, 6000, 5000], name: '能力评估' } ] }] }; myChart2.setOption(option2); window.οnresize=function(){ myChart2.resize(); } 精通 HTML、CSS、JavaScript、PHP、ASP、C、C++、C#、Java、Python 等单词的拼写 本人擅长 Ai、Fw、Fl、Br、Ae、Pr、Id、Ps 等软件的安装与卸载 熟悉 Windows、Linux、OS X、Android、iOS、WP8 等系统的开关机。(此段装逼摘至网络😂) 就单纯的为了折腾，所以创建了这个网站。不知道说些什么，先暂时这样吧…"},{"title":"所有标签","date":"2021-06-30T05:10:49.483Z","updated":"2021-06-30T05:10:49.483Z","comments":true,"path":"tags/index.html","permalink":"https://lihaha.me/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-06-30T05:10:49.483Z","updated":"2021-06-30T05:10:49.483Z","comments":true,"path":"mylist/index.html","permalink":"https://lihaha.me/mylist/index.html","excerpt":"","text":""},{"title":"echarts","date":"2020-08-05T16:09:18.000Z","updated":"2021-06-30T05:10:49.483Z","comments":true,"path":"me/24196.html","permalink":"https://lihaha.me/me/24196.html","excerpt":"","text":"var myChart2 = echarts.init(document.getElementById(\"test2\"));//div元素节点的对象 option2 = { // title: { // text: '基础雷达图' // }, tooltip: {}, legend: { data: ['个人能力评估'] }, radar: { // shape: 'circle', name: { textStyle: { color: '#fff', backgroundColor: '#999', borderRadius: 3, padding: [3, 5] } }, indicator: [ { name: 'vue', max: 10000}, { name: 'react', max: 10000}, { name: 'Python', max: 10000}, { name: 'TS', max: 10000}, { name: 'axiso(二次封装)', max: 10000}, { name: 'webpack', max: 10000} ] }, series: [{ name: '', type: 'radar', // areaStyle: {normal: {}}, data: [ { value: [7000, 8500, 2000, 3000, 6000, 5000], name: '能力评估' } ] }] }; myChart2.setOption(option2); window.οnresize=function(){ myChart2.resize(); }"},{"title":"所有分类","date":"2021-06-30T05:10:49.482Z","updated":"2021-06-30T05:10:49.482Z","comments":true,"path":"categories/index.html","permalink":"https://lihaha.me/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-06-30T05:10:49.483Z","updated":"2021-06-30T05:10:49.483Z","comments":true,"path":"friends/index.html","permalink":"https://lihaha.me/friends/index.html","excerpt":"","text":"示例 123456title: 小巷avatar: https://cdn.jsdelivr.net/gh/lihawhaw/cdn-assets/avatar/avatar_square700.jpgurl: https://lihaha.mescreenshot: 截图keywords: [关键词]description: 描述"}],"posts":[{"title":"git常用的命令","slug":"git常用的命令","date":"2021-06-30T05:10:49.480Z","updated":"2021-06-30T05:10:49.480Z","comments":true,"path":"post/15311.html","link":"","permalink":"https://lihaha.me/post/15311.html","excerpt":"","text":"查看信息 123git --version //查看git的版本信息git config --global user.name //获取当前登录的用户git config --global user.email //获取当前登录用户的邮箱 配置基本信息 1234git config --global user.name &#x27;userName&#x27; #设置全局git账户git config --global user.email &#x27;email&#x27; #设置全局git邮箱#如果没有获取到用户配置，则只能拉取代码，不能修改 添加有关的 123git init #将当前目录变为仓库git add 文件名 #将文件添加到暂存区git commit –m &quot;描述&quot; #将暂存区提交到仓库 跟查询有关的 12345git status #查询仓库状态git diff 文件名 #比较文件差异（请在git add之前使用）git log #查看仓库历史记录(详细)git log --pretty=online 或 git log --online #查看仓库历史记录(单行)git reflog #查看所有版本的commit ID 比较差异 123 git diff #比较的是暂存区和工作区的差异 git diff --cached #比较的是暂存区和历史区的差异 git diff master #比较的是历史区和工作区的差异（修改） 撤销有关的 123456git checkout --文件名 #撤销工作区的修改git reset HEAD 文件名 #撤销暂存区的修改git reset --hard 该版本ID #回退到历史版本git reset --hard HEAD^ #回退到上个版本#上上版本是HEAD^^，也可用HEAD~2表示，以此类推 标签有关的 123456git tag 标签名 #为当前版本打标签git tag 标签名 该版本ID #为历史版本打标签git tag –a 标签名 –m &quot;标签说明&quot; [可选：版本ID] #指定标签说明git tag #查看所有标签git show 标签名 #查看某一标签git tag –d 标签名 #删除某一标签 分支相关的 12345 git branch dev #创建dev分支 git checkout dev #切换分支 git checkout -b dev #创建并切换分支 git branch -d dev #删除分支 git merge dev #合并dev到当前分支 保存内容相关的 1234git stash #保留写好的内容在切换到主干git stash apply #再次切换分支后，需要应用一下保留的内容git stash drop #丢掉保存的内容git stash pop #使用并丢掉 远程仓库相关 12345 git remote -v #查看远程仓库 git remote add origin xxxx #连接远程仓库 git remote rm origin #删除远程仓库 git push origin master -u #获取最新代码 # -u参数 upstream 删除文件 1234 rm fileName #删除本地文件 git rm index.html --cached #删除暂存区文件 #--cached 表示只删除缓存区中的内容 其他 1234567：w #保存：w #filenme 另存为：q #退出：wq #保存并退出：e! #撤销更改返回到上一次保存状态：q! #不保存强制退出：set nu #设置行号","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://lihaha.me/tags/git/"}]},{"title":"Mac终端neofetch显示个性化系统信息","slug":"Mac终端neofetch显示个性化系统信息","date":"2021-01-06T16:02:57.000Z","updated":"2021-06-30T05:10:49.480Z","comments":true,"path":"post/59588.html","link":"","permalink":"https://lihaha.me/post/59588.html","excerpt":"","text":"neofetch官网 Mac安装 12345# brewbrew install neofetch# gitgit clone https://github.com/dylanaraps/neofetchcd neofetchmake install &amp;&amp; make PREFIX=/usr/local install window安装 1scoop install neofetch","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://lihaha.me/tags/Mac/"},{"name":"终端","slug":"终端","permalink":"https://lihaha.me/tags/%E7%BB%88%E7%AB%AF/"},{"name":"termina","slug":"termina","permalink":"https://lihaha.me/tags/termina/"},{"name":"neofetch","slug":"neofetch","permalink":"https://lihaha.me/tags/neofetch/"}]},{"title":"Mac终端美化","slug":"Mac终端美化","date":"2021-01-06T14:31:36.000Z","updated":"2021-06-30T05:10:49.480Z","comments":true,"path":"post/59587.html","link":"","permalink":"https://lihaha.me/post/59587.html","excerpt":"","text":"iTerm2安装iTerm2，它是一款完全免费，为Mac打造的一款终端工具，当然，程序员必备，哈哈哈。 这里是官网，直接下载，解压，拖入Application里就OK了。 这个是美化后的样子 on my zsh官网提供了三种安装方式： 1234567# curl sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;# wget sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;# fetch sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; Powerlevel10k主题GitHub 地址 1.安装 12345678910先clone下来git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/themes/powerlevel10k打开 zshrcvi ~/.zshrc找到 ZSH_THEME 替换ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;之后保存退出:wq最后执行source命令生效source .zshrc 2.配置插件 Oh My Zsh 支持许多强大的插件，可以实现语法高亮、命令自动补全等功能。 12# 查看自带插件命令ls ~/.oh-my-zsh/plugins/ 对于自带插件的功能及使用，你可以前往 Oh My Zsh 官方 Wiki 查看。 我使用的插件 git 默认启用的插件，提供了各种 git 命令的缩写。其 官方说明 提供了所有缩写的参考。 z 自带插件，添加到配置文件中即可启用，可以帮助你快速跳转到访问过的文件夹。具体使用方法请自行 Google 。 zsh-syntax-highlighting 输入正确的常用命令会以绿色高亮显示，输入错误则会显示其他的颜色。使用以下命令安装： 1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 下载完成后，别忘了把 zsh-syntax-highlighting 添加到配置文件的 plugins 中，并执行 source ~/.zshrc 使配置生效。 zsh-autosuggestions 输入命令时，会用浅色字体给出建议的命令，按 → 即可自动补全。使用以下命令安装： 1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 下载完成后，别忘了把 zsh-autosuggestions 添加到配置文件的 plugins 中，并执行 source ~/.zshrc 使配置生效。 安装字体 PowerFontsGitHub 地址 12345678910111213# brewbrew tap homebrew/cask-fontsbrew cask install font-hack-nerd-font# 手动安装cd ~/Downloads &amp;&amp; git clone https://github.com/powerline/fonts.git #将 Powerline 字体文件下载到「下载」文件夹中cd fonts &amp;&amp; ./install.sh #安装所有 Powerline 字体# 最后打开 zshrcvi ~/.zshrc找到 POWERLEVEL9K_MODE 替换POWERLEVEL9K_MODE=&quot;nerdfont-complete&quot; 注意，需要设置在 ZSH_THEME 之前。","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://lihaha.me/tags/Mac/"},{"name":"terminal","slug":"terminal","permalink":"https://lihaha.me/tags/terminal/"},{"name":"iTerm2","slug":"iTerm2","permalink":"https://lihaha.me/tags/iTerm2/"}]},{"title":"数组的方法","slug":"数组的方法","date":"2020-09-09T13:17:52.000Z","updated":"2021-06-30T05:10:49.482Z","comments":true,"path":"post/array.html","link":"","permalink":"https://lihaha.me/post/array.html","excerpt":"","text":"数组的方法 1 arr.push() 从后面添加元素，返回值为添加完后的数组的长度 123let arr = [1,2,3,4,5]console.log(arr.push(5)) // 6console.log(arr) // [1,2,3,4,5,5] \\2 arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素** 123let arr = [1,2,3,4,5]console.log(arr.pop()) // 5console.log(arr) //[1,2,3,4] 3 arr.shift() 从前面删除元素，只能删除一个 返回值是删除的元素 123let arr = [1,2,3,4,5]console.log(arr.shift()) // 1console.log(arr) // [2,3,4,5] 4 arr.unshift() 从前面添加元素, 返回值是添加完后的数组的长度 123let arr = [1,2,3,4,5]console.log(arr.unshift(2)) // 6console.log(arr) //[2,1,2,3,4,5] \\5 arr.splice(i,n) 删除从i(索引值)开始之后的那个元素。返回值是删除的元素** 参数： i 索引值 n 个数 123let arr = [1,2,3,4,5]console.log(arr.splice(2,2)) //[3,4]console.log(arr) // [1,2,5] 6 arr.concat() 连接两个数组 返回值为连接后的新数组 123let arr = [1,2,3,4,5]console.log(arr.concat([1,2])) // [1,2,3,4,5,1,2]console.log(arr) // [1,2,3,4,5] 7 str.split() 将字符串转化为数组 12let str = &#x27;123456&#x27;console.log(str.split(&#x27;&#x27;)) // [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;] \\8 arr.sort() 将数组进行排序,返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的，见例子。** 123456let arr = [2,10,6,1,4,22,3]console.log(arr.sort()) // [1, 10, 2, 22, 3, 4, 6]let arr1 = arr.sort((a, b) =&gt;a - b) console.log(arr1) // [1, 2, 3, 4, 6, 10, 22]let arr2 = arr.sort((a, b) =&gt;b-a) console.log(arr2) // [22, 10, 6, 4, 3, 2, 1] 9 arr.reverse() 将数组反转,返回值是反转后的数组 123let arr = [1,2,3,4,5]console.log(arr.reverse()) // [5,4,3,2,1]console.log(arr) // [5,4,3,2,1] 10 arr.slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组 123let arr = [1,2,3,4,5]console.log(arr.slice(1,3)) // [2,3]console.log(arr) // [1,2,3,4,5] 11 arr.forEach(callback) 遍历数组,无return \\即使有return，也不会返回任何值，并且会影响原来的数组**** callback的参数： value –当前索引的值 index –索引 array –原数组 12345678910111213141516171819202122let arr = [1,2,3,4,5]arr.forEach( (value,index,array)=&gt;&#123; console.log(`value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;`) &#125;) // value:1 index:0 array:1,2,3,4,5 // value:2 index:1 array:1,2,3,4,5 // value:3 index:2 array:1,2,3,4,5 // value:4 index:3 array:1,2,3,4,5 // value:5 index:4 array:1,2,3,4,5let arr = [1,2,3,4,5]arr.forEach( (value,index,array)=&gt;&#123; value = value * 2 console.log(`value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;`) &#125;) console.log(arr) // value:2 index:0 array:1,2,3,4,5 // value:4 index:1 array:1,2,3,4,5 // value:6 index:2 array:1,2,3,4,5 // value:8 index:3 array:1,2,3,4,5 // value:10 index:4 array:1,2,3,4,5 // [1, 2, 3, 4, 5] var arr = [1,2,3,4]; var res = arr.forEach((item,index,arr)=&gt;{ arr[index] = item * 2; return arr }) console.log(arr); // [2,4,6,8] console.log(res); // undefined 12 arr.map(callback) 映射数组(遍历数组),有return 返回一个新数组 。 callback的参数： value –当前索引的值 index –索引 array –原数组 123456let arr = [1,2,3,4,5]arr.map( (value,index,array)=&gt;&#123; value = value * 2 console.log(`value:$&#123;value&#125; index:$&#123;index&#125; array:$&#123;array&#125;`)&#125;) console.log(arr) var arr1 = [1,2,3,4]; var res1 = arr1.map((item,index,arr)=&gt;{ item = item * 3; return item; }) console.log(arr1); // [1,2,3,4] console.log(res1); // [3,6,9,12] ps: arr.forEach()和arr.map()的区别 \\1. arr.forEach()是和for循环一样，是代替for。arr.map()是修改数组其中的数据，并返回新的数据。 \\2. arr.forEach() 没有return arr.map() 有return \\13 arr.filter(callback) 过滤数组，返回一个满足要求的数组** ​ callback的参数： value –当前索引的值 index –索引 1let arr = [1,2,3,4,5] let arr1 = arr.filter( (value, index) =&gt; value&lt;3) console.log(arr1) // [1, 2] 1 14 arr.every(callback) 依据判断条件，数组的元素是否全满足，若满足则返回ture ​ callback的参数： value –当前索引的值 index –索引 1let arr = [1,2,3,4,5] let arr1 = arr.every( (value, index) =&gt;value&lt;3) console.log(arr1) // false let arr2 = arr.every( (value, index) =&gt;value&lt;6) console.log(arr2) // true 1 15 arr.some() 依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture callback的参数： value –当前索引的值 index –索引 1let arr = [1,2,3,4,5] let arr1 = arr.some( (value, index) =&gt;value&lt;3) console.log(arr1) // true let arr2 = arr.some( (value, index) =&gt;value&gt;6) console.log(arr2) // false 1 16 arr.reduce(callback, initialValue) 迭代数组的所有项，累加器，数组中的每个值（从左到右）合并，最终计算为一个值 参数： callback: previousValue 必选 –上一次调用回调返回的值，或者是提供的初始值（initialValue） currentValue 必选 –数组中当前被处理的数组项 index 可选 –当前数组项在数组中的索引值 array 可选 –原数组 initialValue: 可选 –初始值 实行方法：回调函数第一次执行时，preValue 和 curValue 可以是一个值，如果 initialValue 在调用 reduce() 时被提供，那么第一个 preValue 等于 initialValue ，并且curValue 等于数组中的第一个值；如果initialValue 未被提供，那么preValue 等于数组中的第一个值. 12345let arr = [0,1,2,3,4]let arr1 = arr.reduce((preValue, curValue) =&gt; preValue + curValue)console.log(arr1) // 10","categories":[{"name":"js","slug":"js","permalink":"https://lihaha.me/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://lihaha.me/tags/js/"}]},{"title":"JavaScript 中，如何判断两个对象是否相等？","slug":"JavaScript中判断两个对象是否相等","date":"2020-09-06T13:31:12.000Z","updated":"2021-06-30T05:10:49.480Z","comments":true,"path":"post/59586.html","link":"","permalink":"https://lihaha.me/post/59586.html","excerpt":"","text":"12345678910111213141516171819202122232425262728293031/* * @param x &#123;Object&#125; 对象1 * @param y &#123;Object&#125; 对象2 * @return &#123;Boolean&#125; true 为相等，false 为不等 */var deepEqual = function (x, y) &#123; // 指向同一内存时 if (x === y) &#123; return true; &#125; else if ((typeof x == &quot;object&quot; &amp;&amp; x != null) &amp;&amp; (typeof y == &quot;object&quot; &amp;&amp; y != null)) &#123; if (Object.keys(x).length != Object.keys(y).length) return false; for (var prop in x) &#123; if (y.hasOwnProperty(prop)) &#123; if (! deepEqual(x[prop], y[prop])) return false; &#125; else return false; &#125; return true; &#125; else return false;&#125; 虽然这个简单的实现适用于我们的例子中，有很多情况下，它是不能处理。例如： 如果该属性值之一本身就是一个对象吗？ 如果属性值中的一个是NaN（在JavaScript中，是不是等于自己唯一的价值？） 如果一个属性的值为undefined，而另一个对象没有这个属性（因而计算结果为不确定？）","categories":[],"tags":[{"name":"前端面试题","slug":"前端面试题","permalink":"https://lihaha.me/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"}]},{"title":"git配置多个ssh密钥","slug":"git配置多个ssh密钥","date":"2020-08-29T11:31:42.000Z","updated":"2021-06-30T05:10:49.481Z","comments":true,"path":"post/59585.html","link":"","permalink":"https://lihaha.me/post/59585.html","excerpt":"","text":"1.生成多个密钥 ssh-keygen -t rsa -C ‘xxx@xxx.com’ -f ~/.ssh/coding.ssh 说明：建议使用Git Bash生成 ，其他终端可能不生效~ 2.新建config文件1234567891011121314151617181920# C:\\Users\\用户名\\.ssh\\config# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee.ssh# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github.ssh# codingHost e.coding.netHostName e.coding.netPreferredAuthentications publickeyIdentityFile ~/.ssh/coding.ssh 说明： #HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。#Port：指定的端口号。#User：指定的登陆用户名。#IdentifyFile：指定的私钥地址。 3.测试 ssh -T &#103;&#105;&#116;&#64;&#101;&#x2e;&#x63;&#x6f;&#100;&#105;&#x6e;&#103;&#x2e;&#x6e;&#x65;&#x74; 4.关于用户名 全局用户名 12git config --global --unset user.namegit config --global --unset user.email 局部用户名 12git config user.name &quot;yourname&quot; git config user.email &quot;youremail&quot; 注： 这样就可以在不同的仓库，已不同的账号登录。","categories":[{"name":"ssh","slug":"ssh","permalink":"https://lihaha.me/categories/ssh/"}],"tags":[{"name":"git","slug":"git","permalink":"https://lihaha.me/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"https://lihaha.me/tags/ssh/"}]},{"title":"当@vue/cli下载加上node-sass时下载失败","slug":"当@vuecli下载加上node-sass时下载失败","date":"2020-05-18T05:50:32.000Z","updated":"2021-06-30T05:10:49.482Z","comments":true,"path":"post/23302.html","link":"","permalink":"https://lihaha.me/post/23302.html","excerpt":"","text":"打开终端添加1npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/ 清理npm缓存1npm cache clean --force 注：非必须","categories":[{"name":"vue","slug":"vue","permalink":"https://lihaha.me/categories/vue/"}],"tags":[{"name":"node","slug":"node","permalink":"https://lihaha.me/tags/node/"},{"name":"vue","slug":"vue","permalink":"https://lihaha.me/tags/vue/"}]},{"title":"好玩的API（更新中）","slug":"好玩的API（更新中）","date":"2020-03-01T09:30:16.000Z","updated":"2021-06-30T05:10:49.481Z","comments":true,"path":"post/12334.html","link":"","permalink":"https://lihaha.me/post/12334.html","excerpt":"","text":"1.查看IP地址 这里是官方的地址 https://www.ipify.org/ 1234567891011let http = require(&#x27;http&#x27;);http.get(&#123; &#x27;host&#x27;: &#x27;api.ipify.org&#x27;, &#x27;port&#x27;: 80, &#x27;path&#x27;: &#x27;/&#x27;&#125;, function (resp) &#123; resp.on(&#x27;data&#x27;, function (ip) &#123; console.log(&quot;My IP is: &quot; + ip); &#125;);&#125;);","categories":[{"name":"API","slug":"API","permalink":"https://lihaha.me/categories/API/"}],"tags":[{"name":"API","slug":"API","permalink":"https://lihaha.me/tags/API/"}]}],"categories":[{"name":"js","slug":"js","permalink":"https://lihaha.me/categories/js/"},{"name":"ssh","slug":"ssh","permalink":"https://lihaha.me/categories/ssh/"},{"name":"vue","slug":"vue","permalink":"https://lihaha.me/categories/vue/"},{"name":"API","slug":"API","permalink":"https://lihaha.me/categories/API/"}],"tags":[{"name":"git","slug":"git","permalink":"https://lihaha.me/tags/git/"},{"name":"Mac","slug":"Mac","permalink":"https://lihaha.me/tags/Mac/"},{"name":"终端","slug":"终端","permalink":"https://lihaha.me/tags/%E7%BB%88%E7%AB%AF/"},{"name":"termina","slug":"termina","permalink":"https://lihaha.me/tags/termina/"},{"name":"neofetch","slug":"neofetch","permalink":"https://lihaha.me/tags/neofetch/"},{"name":"terminal","slug":"terminal","permalink":"https://lihaha.me/tags/terminal/"},{"name":"iTerm2","slug":"iTerm2","permalink":"https://lihaha.me/tags/iTerm2/"},{"name":"js","slug":"js","permalink":"https://lihaha.me/tags/js/"},{"name":"前端面试题","slug":"前端面试题","permalink":"https://lihaha.me/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"ssh","slug":"ssh","permalink":"https://lihaha.me/tags/ssh/"},{"name":"node","slug":"node","permalink":"https://lihaha.me/tags/node/"},{"name":"vue","slug":"vue","permalink":"https://lihaha.me/tags/vue/"},{"name":"API","slug":"API","permalink":"https://lihaha.me/tags/API/"}]}