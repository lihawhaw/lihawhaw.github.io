<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git常用的命令</title>
      <link href="/post/15311.html"/>
      <url>/post/15311.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/05/a855b5b2408a7.png' width='100%'  height= '300px' alt='git' /><span id="more"></span><ul><li>查看信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version   //查看git的版本信息</span><br><span class="line">git config --global user.name   //获取当前登录的用户</span><br><span class="line">git config --global user.email  //获取当前登录用户的邮箱</span><br></pre></td></tr></table></figure><ul><li>配置基本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;userName&#x27;</span> <span class="comment">#设置全局git账户</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;email&#x27;</span> <span class="comment">#设置全局git邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有获取到用户配置，则只能拉取代码，不能修改 </span></span><br></pre></td></tr></table></figure><ul><li>添加有关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#将当前目录变为仓库</span></span><br><span class="line">git add 文件名 <span class="comment">#将文件添加到暂存区</span></span><br><span class="line">git commit –m <span class="string">&quot;描述&quot;</span> <span class="comment">#将暂存区提交到仓库</span></span><br></pre></td></tr></table></figure><ul><li>跟查询有关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment">#查询仓库状态</span></span><br><span class="line">git diff 文件名 <span class="comment">#比较文件差异（请在git add之前使用）</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看仓库历史记录(详细)</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=online 或 git <span class="built_in">log</span> --online <span class="comment">#查看仓库历史记录(单行)</span></span><br><span class="line">git reflog <span class="comment">#查看所有版本的commit ID</span></span><br></pre></td></tr></table></figure><ul><li>比较差异</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　git diff<span class="comment">#比较的是暂存区和工作区的差异</span></span><br><span class="line">　　git diff --cached   <span class="comment">#比较的是暂存区和历史区的差异</span></span><br><span class="line">　　git diff master<span class="comment">#比较的是历史区和工作区的差异（修改）</span></span><br></pre></td></tr></table></figure><ul><li>撤销有关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout --文件名 <span class="comment">#撤销工作区的修改</span></span><br><span class="line">git reset HEAD 文件名 <span class="comment">#撤销暂存区的修改</span></span><br><span class="line">git reset --hard 该版本ID <span class="comment">#回退到历史版本</span></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上个版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上上版本是HEAD^^，也可用HEAD~2表示，以此类推</span></span><br></pre></td></tr></table></figure><ul><li>标签有关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名 <span class="comment">#为当前版本打标签</span></span><br><span class="line">git tag 标签名 该版本ID <span class="comment">#为历史版本打标签</span></span><br><span class="line">git tag –a 标签名 –m <span class="string">&quot;标签说明&quot;</span> [可选：版本ID] <span class="comment">#指定标签说明</span></span><br><span class="line">git tag <span class="comment">#查看所有标签</span></span><br><span class="line">git show 标签名 <span class="comment">#查看某一标签</span></span><br><span class="line">git tag –d 标签名 <span class="comment">#删除某一标签</span></span><br></pre></td></tr></table></figure><ul><li>分支相关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　git branch dev <span class="comment">#创建dev分支</span></span><br><span class="line">　　git checkout dev <span class="comment">#切换分支</span></span><br><span class="line">　　git checkout -b dev <span class="comment">#创建并切换分支</span></span><br><span class="line">　　git branch -d dev <span class="comment">#删除分支</span></span><br><span class="line">　　git merge dev<span class="comment">#合并dev到当前分支</span></span><br></pre></td></tr></table></figure><ul><li>保存内容相关的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash    <span class="comment">#保留写好的内容在切换到主干</span></span><br><span class="line">git stash apply <span class="comment">#再次切换分支后，需要应用一下保留的内容</span></span><br><span class="line">git stash drop <span class="comment">#丢掉保存的内容</span></span><br><span class="line">git stash pop <span class="comment">#使用并丢掉</span></span><br></pre></td></tr></table></figure><ul><li>远程仓库相关</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　git remote -v <span class="comment">#查看远程仓库</span></span><br><span class="line">　　git remote add origin xxxx <span class="comment">#连接远程仓库</span></span><br><span class="line">　　git remote rm origin <span class="comment">#删除远程仓库</span></span><br><span class="line">　　git push origin master -u   <span class="comment">#获取最新代码</span></span><br><span class="line">　　<span class="comment"># -u参数 upstream</span></span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　rm fileName<span class="comment">#删除本地文件</span></span><br><span class="line">　　git rm index.html --cached    <span class="comment">#删除暂存区文件</span></span><br><span class="line">　　</span><br><span class="line">　　<span class="comment">#--cached 表示只删除缓存区中的内容</span></span><br></pre></td></tr></table></figure><ul><li>其他</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">：w  #保存</span><br><span class="line">：w #filenme 另存为</span><br><span class="line">：q #退出</span><br><span class="line">：wq #保存并退出</span><br><span class="line">：e! #撤销更改返回到上一次保存状态</span><br><span class="line">：q! #不保存强制退出</span><br><span class="line">：set nu #设置行号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端neofetch显示个性化系统信息</title>
      <link href="/post/59588.html"/>
      <url>/post/59588.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/07/1204ae9af8e37.png' width='100%'  height= '300px' alt='git' /><span id="more"></span><p><a href="https://github.com/dylanaraps/neofetch">neofetch</a>官网</p><p>Mac安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># brew</span><br><span class="line">brew install neofetch</span><br><span class="line"># git</span><br><span class="line">git clone https://github.com/dylanaraps/neofetchcd neofetch</span><br><span class="line">make install &amp;&amp; make PREFIX=/usr/local install</span><br></pre></td></tr></table></figure><p>window安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install neofetch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 终端 </tag>
            
            <tag> termina </tag>
            
            <tag> neofetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端美化</title>
      <link href="/post/59587.html"/>
      <url>/post/59587.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/06/08b266278e58c.jpg' width='100%'  height= '300px' alt='git' /><span id="more"></span><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><strong>iTerm2</strong></h2><p>安装<code><strong>iTerm2</strong></code>，它是一款完全免费，为Mac打造的一款终端工具，当然，程序员必备，哈哈哈。</p><p>这里是<a href="https://iterm2.com/index.html">官网</a>，直接下载，解压，拖入<code>Application</code>里就OK了。</p><img src='https://7.dusays.com/2021/01/06/51618345705ce.png' width='100%'  alt='git' /><p>这个是美化后的样子</p><h2 id="on-my-zsh"><a href="#on-my-zsh" class="headerlink" title="on my zsh"></a><strong>on my zsh</strong></h2><p><a href="https://github.com/ohmyzsh/ohmyzsh">官网</a>提供了三种安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl</span></span><br><span class="line"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># wget</span></span><br><span class="line"> sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># fetch</span></span><br><span class="line"> sh -c <span class="string">&quot;<span class="subst">$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Powerlevel10k主题"><a href="#Powerlevel10k主题" class="headerlink" title="Powerlevel10k主题"></a><strong>Powerlevel10k</strong>主题</h2><p><a href="https://github.com/romkatv/powerlevel10k">GitHub</a> 地址</p><p><strong>1.安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先<span class="built_in">clone</span>下来</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line">打开 zshrc</span><br><span class="line">vi ~/.zshrc</span><br><span class="line">找到 ZSH_THEME 替换</span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br><span class="line">之后保存退出</span><br><span class="line">:wq</span><br><span class="line">最后执行<span class="built_in">source</span>命令生效</span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure><p><strong>2.配置插件</strong></p><p>Oh My Zsh 支持许多强大的插件，可以实现语法高亮、命令自动补全等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看自带插件命令</span></span><br><span class="line">ls ~/.oh-my-zsh/plugins/</span><br></pre></td></tr></table></figure><p>对于自带插件的功能及使用，你可以前往 Oh My Zsh <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">官方 Wiki</a> 查看。</p><p><strong>我使用的插件</strong></p><p><strong>git</strong></p><p>默认启用的插件，提供了各种 <code>git</code> 命令的缩写。其 <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git">官方说明</a> 提供了所有缩写的参考。</p><p><strong>z</strong></p><p>自带插件，添加到配置文件中即可启用，可以帮助你快速跳转到访问过的文件夹。具体使用方法请自行 Google 。</p><p><strong>zsh-syntax-highlighting</strong></p><p>输入正确的常用命令会以绿色高亮显示，输入错误则会显示其他的颜色。使用以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>下载完成后，别忘了把 <code>zsh-syntax-highlighting</code> 添加到配置文件的 <code>plugins</code> 中，并执行 <code>source ~/.zshrc</code> 使配置生效。</p><p><strong>zsh-autosuggestions</strong></p><p>输入命令时，会用浅色字体给出建议的命令，按 <code>→</code> 即可自动补全。使用以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>下载完成后，别忘了把 <code>zsh-autosuggestions</code> 添加到配置文件的 <code>plugins</code> 中，并执行 <code>source ~/.zshrc</code> 使配置生效。</p><h2 id="安装字体-PowerFonts"><a href="#安装字体-PowerFonts" class="headerlink" title="安装字体 PowerFonts"></a><strong>安装字体 PowerFonts</strong></h2><p><a href="https://github.com/powerline/fonts">GitHub</a> 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brew</span></span><br><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动安装</span></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads &amp;&amp; git <span class="built_in">clone</span> https://github.com/powerline/fonts.git<span class="comment">#将 Powerline 字体文件下载到「下载」文件夹中</span></span><br><span class="line"><span class="built_in">cd</span> fonts &amp;&amp; ./install.sh<span class="comment">#安装所有 Powerline 字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后</span></span><br><span class="line">打开 zshrc</span><br><span class="line">vi ~/.zshrc</span><br><span class="line">找到 POWERLEVEL9K_MODE 替换</span><br><span class="line">POWERLEVEL9K_MODE=<span class="string">&quot;nerdfont-complete&quot;</span></span><br></pre></td></tr></table></figure><p>注意，需要设置在 <code>ZSH_THEME</code> 之前。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> terminal </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的方法</title>
      <link href="/post/array.html"/>
      <url>/post/array.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/05/fc74915c3472f.jpeg' width='100%'  height= '300px' alt='git' /><span id="more"></span><p>数组的方法</p><p><strong>1 arr.push() 从后面添加元素，返回值为添加完后的数组的长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.push(5))   // 6</span><br><span class="line">console.log(arr) // [1,2,3,4,5,5]</span><br></pre></td></tr></table></figure><p><strong><em>\</em>2 arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素**</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.pop())     // 5</span><br><span class="line">console.log(arr)  //[1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>3 arr.shift() 从前面删除元素，只能删除一个 返回值是删除的元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.shift())  // 1</span><br><span class="line">console.log(arr)   // [2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>4 arr.unshift() 从前面添加元素, 返回值是添加完后的数组的长度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.unshift(2))    // 6</span><br><span class="line">console.log(arr)  //[2,1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong><em>\</em>5 arr.splice(i,n) 删除从i(索引值)开始之后的那个元素。返回值是删除的元素<br>**</strong></p><p>　　参数： i 索引值   n 个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.splice(2,2))     //[3,4]</span><br><span class="line">console.log(arr)    // [1,2,5]</span><br></pre></td></tr></table></figure><p><strong>6 arr.concat() 连接两个数组 返回值为连接后的新数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.concat([1,2]))  // [1,2,3,4,5,1,2]</span><br><span class="line">console.log(arr)   // [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>7 str.split() 将字符串转化为数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &#x27;123456&#x27;</span><br><span class="line">console.log(str.split(&#x27;&#x27;)) // [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span><br></pre></td></tr></table></figure><p><strong><em>\</em>8 arr.sort() 将数组进行排序,返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的，见例子。**</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [2,10,6,1,4,22,3]</span><br><span class="line">console.log(arr.sort())   // [1, 10, 2, 22, 3, 4, 6]</span><br><span class="line">let arr1 = arr.sort((a, b) =&gt;a - b)  </span><br><span class="line">console.log(arr1)   // [1, 2, 3, 4, 6, 10, 22]</span><br><span class="line">let arr2 = arr.sort((a, b) =&gt;b-a)  </span><br><span class="line">console.log(arr2)  // [22, 10, 6, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure><p><strong>9 arr.reverse() 将数组反转,返回值是反转后的数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.reverse())    // [5,4,3,2,1]</span><br><span class="line">console.log(arr)    // [5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>10 arr.slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">console.log(arr.slice(1,3))   // [2,3]</span><br><span class="line">console.log(arr)    //  [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>11 arr.forEach(callback) 遍历数组,无return \</strong>即使有return，也不会返回任何值，并且会影响原来的数组****</p><p>　　callback的参数： value –当前索引的值</p><p>　　　　　　　　　　index –索引</p><p>　　　　　　　　　　array –原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">arr.forEach( (value,index,array)=&gt;&#123;</span><br><span class="line">        console.log(`value:$&#123;value&#125;    index:$&#123;index&#125;     array:$&#123;array&#125;`)</span><br><span class="line">    &#125;)   </span><br><span class="line">    //  value:1    index:0     array:1,2,3,4,5</span><br><span class="line">    //  value:2    index:1     array:1,2,3,4,5</span><br><span class="line">    //  value:3    index:2     array:1,2,3,4,5</span><br><span class="line">    //  value:4    index:3     array:1,2,3,4,5</span><br><span class="line">    //  value:5    index:4     array:1,2,3,4,5</span><br><span class="line"></span><br><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">arr.forEach( (value,index,array)=&gt;&#123;</span><br><span class="line">        value = value * 2</span><br><span class="line">        console.log(`value:$&#123;value&#125;    index:$&#123;index&#125;     array:$&#123;array&#125;`)</span><br><span class="line">    &#125;)   </span><br><span class="line">    console.log(arr)</span><br><span class="line">    // value:2    index:0     array:1,2,3,4,5</span><br><span class="line">    // value:4    index:1     array:1,2,3,4,5</span><br><span class="line">    // value:6    index:2     array:1,2,3,4,5</span><br><span class="line">    // value:8    index:3     array:1,2,3,4,5</span><br><span class="line">    // value:10   index:4     array:1,2,3,4,5</span><br><span class="line">    // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>var arr = [1,2,3,4]; </p><p>var res = arr.forEach((item,index,arr)=&gt;{   </p><p> arr[index] = item * 2; </p><p> return arr </p><p>})</p><p>console.log(arr); // [2,4,6,8]</p><p>console.log(res); // undefined </p><p><strong>12 arr.map(callback) 映射数组(遍历数组),有return 返回一个新数组 。</strong></p><p>　　callback的参数： value –当前索引的值</p><p>　　　　　　　　　　index –索引</p><p>　　　　　　　　　　array –原数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br><span class="line">arr.map( (value,index,array)=&gt;&#123;</span><br><span class="line">        value = value * 2</span><br><span class="line">        console.log(`value:$&#123;value&#125;    index:$&#123;index&#125;     array:$&#123;array&#125;`)</span><br><span class="line">&#125;)   </span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><p>var arr1 = [1,2,3,4]; </p><p>var res1 = arr1.map((item,index,arr)=&gt;{ </p><p> item = item * 3; </p><p> return item; </p><p>})</p><p>console.log(arr1); // [1,2,3,4]</p><p>console.log(res1); // [3,6,9,12]</p><p>ps: arr.forEach()和arr.map()的区别<br>  \1. arr.forEach()是和for循环一样，是代替for。arr.map()是修改数组其中的数据，并返回新的数据。<br>  \2. arr.forEach() 没有return arr.map() 有return</p><p><strong><em>\</em>13 arr.filter(callback) 过滤数组，返回一个满足要求的数组**</strong> </p><p>​      callback的参数： value –当前索引的值</p><p>　　　　　　　　　　   index –索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p> let arr1 = arr.filter( (value, index) =&gt; value&lt;3)</p><p> console.log(arr1)  // [1, 2]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>14 arr.every(callback) 依据判断条件，数组的元素是否全满足，若满足则返回ture</strong></p><p>​      callback的参数： value –当前索引的值</p><p>　　　　　　　　　　   index –索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>  let arr1 = arr.every( (value, index) =&gt;value&lt;3)</p><p>  console.log(arr1) // false</p><p>  let arr2 = arr.every( (value, index) =&gt;value&lt;6)</p><p>  console.log(arr2) // true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>15 arr.some() 依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture</strong></p><p> 　　　callback的参数： value –当前索引的值</p><p>　　　　　　　　　　   index –索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>let arr1 = arr.some( (value, index) =&gt;value&lt;3)</p><p>console.log(arr1) // true</p><p>let arr2 = arr.some( (value, index) =&gt;value&gt;6)</p><p>console.log(arr2) // false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>16 arr.reduce(callback, initialValue) 迭代数组的所有项，累加器，数组中的每个值（从左到右）合并，最终计算为一个值</strong></p><p>　　参数： callback: previousValue 必选 –上一次调用回调返回的值，或者是提供的初始值（initialValue）</p><p>　　　　　　　　　　currentValue 必选 –数组中当前被处理的数组项</p><p>　　　　　　　　　　index 可选 –当前数组项在数组中的索引值</p><p>　　　　　　　　　　array 可选 –原数组</p><p>　　　　　initialValue: 可选 –初始值</p><p>　　实行方法：回调函数第一次执行时，preValue 和 curValue 可以是一个值，如果 initialValue 在调用 reduce() 时被提供，那么第一个 preValue 等于 initialValue ，并且curValue 等于数组中的第一个值；如果initialValue 未被提供，那么preValue 等于数组中的第一个值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [0,1,2,3,4]</span><br><span class="line">let arr1 = arr.reduce((preValue, curValue) =&gt; </span><br><span class="line">    preValue + curValue</span><br><span class="line">)</span><br><span class="line">console.log(arr1)    // 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中，如何判断两个对象是否相等？</title>
      <link href="/post/59586.html"/>
      <url>/post/59586.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/05/f2e96ecf256d0.jpeg' width='100%'  height= '300px' alt='git' /><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param x &#123;Object&#125; 对象1</span></span><br><span class="line"><span class="comment"> * @param y &#123;Object&#125; 对象2</span></span><br><span class="line"><span class="comment"> * @return  &#123;Boolean&#125; true 为相等，false 为不等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deepEqual = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 指向同一内存时</span></span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">typeof</span> x == <span class="string">&quot;object&quot;</span> &amp;&amp; x != <span class="literal">null</span>) &amp;&amp; (<span class="keyword">typeof</span> y == <span class="string">&quot;object&quot;</span> &amp;&amp; y != <span class="literal">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(x).length != <span class="built_in">Object</span>.keys(y).length)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> x) &#123;</span><br><span class="line">      <span class="keyword">if</span> (y.hasOwnProperty(prop))</span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="keyword">if</span> (! deepEqual(x[prop], y[prop]))</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然这个简单的实现适用于我们的例子中，有很多情况下，它是不能处理。例如：</p><ol><li>如果该属性值之一本身就是一个对象吗？</li><li>如果属性值中的一个是NaN（在JavaScript中，是不是等于自己唯一的价值？）</li><li>如果一个属性的值为undefined，而另一个对象没有这个属性（因而计算结果为不确定？）</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git配置多个ssh密钥</title>
      <link href="/post/59585.html"/>
      <url>/post/59585.html</url>
      
        <content type="html"><![CDATA[<img src='https://picgo-lihawhaw.oss-cn-shanghai.aliyuncs.com/PicGo/20200829194823.webp' width='100%'  height= '300px' alt='git' /><span id="more"></span><h3 id="1-生成多个密钥"><a href="#1-生成多个密钥" class="headerlink" title="1.生成多个密钥"></a>1.生成多个密钥</h3><blockquote><p> ssh-keygen -t rsa -C ‘xxx@xxx.com’ -f ~/.ssh/coding.ssh</p></blockquote><p>说明：建议使用Git Bash生成 ，其他终端可能不生效~</p><h3 id="2-新建config文件"><a href="#2-新建config文件" class="headerlink" title="2.新建config文件"></a>2.新建config文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C:\Users\用户名\.ssh\config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee.ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github.ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># coding</span></span><br><span class="line">Host e.coding.net</span><br><span class="line">HostName e.coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/coding.ssh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><p>#HostName： 是目标主机的主机名，也就是平时我们使用ssh后面跟的地址名称。<br>#Port：指定的端口号。<br>#User：指定的登陆用户名。<br>#IdentifyFile：指定的私钥地址。</p><h3 id="3-测试-ssh-T-103-105-116-64-101-x2e-x63-x6f-100-105-x6e-103-x2e-x6e-x65-x74"><a href="#3-测试-ssh-T-103-105-116-64-101-x2e-x63-x6f-100-105-x6e-103-x2e-x6e-x65-x74" class="headerlink" title="3.测试 ssh -T &#103;&#105;&#116;&#64;&#101;&#x2e;&#x63;&#x6f;&#100;&#105;&#x6e;&#103;&#x2e;&#x6e;&#x65;&#x74;"></a>3.测试 ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#101;&#x2e;&#x63;&#x6f;&#100;&#105;&#x6e;&#103;&#x2e;&#x6e;&#x65;&#x74;">&#103;&#105;&#116;&#64;&#101;&#x2e;&#x63;&#x6f;&#100;&#105;&#x6e;&#103;&#x2e;&#x6e;&#x65;&#x74;</a></h3><img src='https://7.dusays.com/2021/01/05/aadeb42e4607f.png' width='100%'  height= '300px' alt='git' /><h3 id="4-关于用户名"><a href="#4-关于用户名" class="headerlink" title="4.关于用户名"></a>4.关于用户名</h3><blockquote><p> 全局用户名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><blockquote><p>局部用户名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;yourname&quot;</span> </span><br><span class="line">git config user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>注： 这样就可以在不同的仓库，已不同的账号登录。</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当@vue/cli下载加上node-sass时下载失败</title>
      <link href="/post/23302.html"/>
      <url>/post/23302.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/05/f71ddf7daa4ea.png' width='100%'  height= '300px' alt='git' /><span id="more"></span><h2 id="打开终端添加"><a href="#打开终端添加" class="headerlink" title="打开终端添加"></a>打开终端添加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><h2 id="清理npm缓存"><a href="#清理npm缓存" class="headerlink" title="清理npm缓存"></a>清理npm缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force </span><br></pre></td></tr></table></figure><blockquote><p>注：非必须</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好玩的API（更新中）</title>
      <link href="/post/12334.html"/>
      <url>/post/12334.html</url>
      
        <content type="html"><![CDATA[<img src='https://7.dusays.com/2021/01/05/f2979d72dfb9f.png' width='100%'  height= '300px' alt='git' /><span id="more"></span><p>1.查看IP地址</p><p>这里是官方的地址 <a href="https://www.ipify.org/">https://www.ipify.org/</a> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.get(&#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;api.ipify.org&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    resp.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ip</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;My IP is: &quot;</span> + ip);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
